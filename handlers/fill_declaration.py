import asyncio

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, InputFile

from utils.states import Declaration
from keyboards import builders
from reportlab.lib.pagesizes import letter
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfgen import canvas




def create_pdf(file_path, text):
    text_for_write = f"""–û–ø–∏—Å–∞–Ω–∏–µ {text['about']}
    –í–µ—Å –≥—Ä—É–∑–∞ {text['weight']}
    –ì–∞–±–∞—Ä–∏—Ç—ã –≥—Ä—É–∑–∞ {text['dimensions']}
    –¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ {text['shipping_address']}
    –¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è {text['receiving_address']}
    –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã {text['payment_method']}"""
    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —à—Ä–∏—Ñ—Ç–∞ Times New Roman
    font_path = "handlers/timesnewromanpsmt.ttf"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç
    pdfmetrics.registerFont(TTFont('TimesNewRoman', font_path))

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Canvas (—Ö–æ–ª—Å—Ç) –¥–ª—è PDF —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É
    c = canvas.Canvas(file_path, pagesize=letter)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
    c.setFont("TimesNewRoman", 12)

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ —Ç–µ–∫—Å—Ç–∞
    x = 100
    y = 750

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–∞–∫–µ—Ç–∞)
    max_width = 400

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å—Ç—Ä–æ–∫
    line_height = 15

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = text_for_write.split('\n')

    # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Ç–µ–∫—Å—Ç–∞
    for line in lines:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞
        width = c.stringWidth(line, "TimesNewRoman", 12)

        # –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã, –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        if width > max_width:
            c.drawString(x, y, line[:max_width])
            y -= line_height
            line = line[max_width:]

            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
            while len(line) > max_width:
                c.drawString(x, y, line[:max_width])
                y -= line_height
                line = line[max_width:]
            c.drawString(x, y, line)
        else:
            c.drawString(x, y, line)
        y -= line_height

    # –ó–∞–∫—Ä—ã—Ç–∏–µ PDF
    c.save()



router = Router()

@router.message(F.text == 'üìë–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏–∫–ª–∞—Ä–∞—Ü–∏–∏')
@router.message(Command(commands=['fill_dec']))
async def fill_declaration(message: Message, state: FSMContext):
    await state.set_state(Declaration.about)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞')

@router.message(Declaration.about)
async def fill_about(message: Message, state: FSMContext):
    await state.update_data(about=message.text)
    await state.set_state(Declaration.weight)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞')

@router.message(Declaration.weight)
async def fill_weight(message: Message, state: FSMContext):
    await state.update_data(weight = message.text)
    await state.set_state(Declaration.dimensions)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–∞–±–∞—Ä–∏—Ç—ã')

@router.message(Declaration.dimensions)
async def fill_dimensions(message: Message, state: FSMContext):
    await state.update_data(dimensions=message.text)
    await state.set_state(Declaration.shipping_address)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏')

@router.message(Declaration.shipping_address)
async def fill_shipping_adress(message: Message, state: FSMContext):
    await state.update_data(shipping_address=message.text)
    await state.set_state(Declaration.receiving_address)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è')

@router.message(Declaration.receiving_address)
async def fill_receiving_adress(message: Message, state: FSMContext):
    await state.update_data(receiving_address=message.text)
    await state.set_state(Declaration.payment_method)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup=builders.create_builder_reply(['–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ', '–ù–∞–ª–∏—á–Ω—ã–µ'], one_time_keyboard=True))

@router.message(Declaration.payment_method)
async def fill_end(message: Message, state: FSMContext):
    await state.update_data(payment_method=message.text)
    data = await state.get_data()
    await state.clear()
    await message.answer(text='–°—É–ø–µ—Ä, —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –í–∞–º pdf —Ñ–∞–π–ª', reply_markup=builders.create_builder_reply('üìë–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏–∫–ª–∞—Ä–∞—Ü–∏–∏'))
    create_pdf('handlers/test.pdf', data)
    input_file = FSInputFile("handlers/test.pdf", filename="handlers/test.pdf")
    await message.answer_document(input_file)